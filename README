	rukia - Randon Uniform walK In Automata

  A library to generate uniformly at random paths in automata.

  Copyright (C) 2008, 2009, 2011, 2012 Johan Oudinet

*** Notes on how to install. ***
  This package needs:
      - Boost Graph Library (version 1.47 or higher),
      - GNU Multiple Precision,

  After installing those packages, you can install this package as
  easy as any free software (See INSTALL file for a detail explanation)

  If you've installed one of the required libraries in a non classical
  path, you may need to tell to configure how to find it. For example,
  assume BGL headers are in $HOME/include and BGL libraries are in
  $HOME/lib, the following command tell to configure where they are :
  $ ./configure --with-boost=$HOME

	Note to GIT users: the configure script can be generated via:
	$ ./bootstrap.sh

** Tips on manual installation of Boost library **
- under a Unix-like system:

  extract boost archive then go in it and enter the two following
  commands:  
  $ ./bootstrap.sh --prefix=$HOME
  $ ./b2 install
  $ sudo ldconfig $HOME/lib

  Now Boost is correctly installed in your $HOME directory. You
  just have to tell to configure where look for (as explained
  previously).


*** Examples ***
All the program examples, which use Rukia features, are in src/
directory.

You should start from draw_with_ctable.cc that produces the program
draw_exact_ctable. This program prints uniformly at random m paths of
length n from a graph described in GRAPHVIZ format (.dot). If not all
states are final state, you need to give an optional file that lists
every final states. The following commands show an example with a
graph that have 6 states but only state 5 is a final state. We draw 3
paths of length 7 in this automaton. Actually the first label 'i' is
here just to be able to draw paths of length <= 7. Hence, in this
particular execution, we got 2 paths of length 3 ('abc' and 'adg') and
1 path of length 5 ('adefg').

% cat data/example.dot 
digraph G {
0 -> 0 [label = "i"];
0 -> 1 [label = "a"];
1 -> 2 [label = "b"];
1 -> 3 [label = "d"];
2 -> 5 [label = "c"];
3 -> 4 [label = "e"];
3 -> 5 [label = "g"];
4 -> 3 [label = "f"];
}
% cat data/example.fs 
5
% src/draw_exact_ctable data/example.dot 3 7 data/example.fs
5 is final.
i i a d e f g
i i i i a d g
i i i i a b c


*** Comments are welcome. ***

	- Johan Oudinet <oudinet@lri.fr>
